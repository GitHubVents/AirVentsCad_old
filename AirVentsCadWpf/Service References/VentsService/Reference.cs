//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AirVentsCadWpf.VentsService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="VentsService.I1cService")]
    public interface I1cService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I1cService/AuthenticationUser", ReplyAction="http://tempuri.org/I1cService/AuthenticationUserResponse")]
        bool AuthenticationUser(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I1cService/AuthenticationUser", ReplyAction="http://tempuri.org/I1cService/AuthenticationUserResponse")]
        System.Threading.Tasks.Task<bool> AuthenticationUserAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I1cService/GetClassifierMeasureList", ReplyAction="http://tempuri.org/I1cService/GetClassifierMeasureListResponse")]
        VentsCadLibrary.VentsService.ConnectionClassifierMeasure[] GetClassifierMeasureList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I1cService/GetClassifierMeasureList", ReplyAction="http://tempuri.org/I1cService/GetClassifierMeasureListResponse")]
        System.Threading.Tasks.Task<VentsCadLibrary.VentsService.ConnectionClassifierMeasure[]> GetClassifierMeasureListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I1cService/SearchNomenclatureByName", ReplyAction="http://tempuri.org/I1cService/SearchNomenclatureByNameResponse")]
        VentsCadLibrary.VentsService.ConnectionNomenclature[] SearchNomenclatureByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I1cService/SearchNomenclatureByName", ReplyAction="http://tempuri.org/I1cService/SearchNomenclatureByNameResponse")]
        System.Threading.Tasks.Task<VentsCadLibrary.VentsService.ConnectionNomenclature[]> SearchNomenclatureByNameAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface I1cServiceChannel : AirVentsCadWpf.VentsService.I1cService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class I1cServiceClient : System.ServiceModel.ClientBase<AirVentsCadWpf.VentsService.I1cService>, AirVentsCadWpf.VentsService.I1cService {
        
        public I1cServiceClient() {
        }
        
        public I1cServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public I1cServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public I1cServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public I1cServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AuthenticationUser(string UserName, string Password) {
            return base.Channel.AuthenticationUser(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<bool> AuthenticationUserAsync(string UserName, string Password) {
            return base.Channel.AuthenticationUserAsync(UserName, Password);
        }
        
        public VentsCadLibrary.VentsService.ConnectionClassifierMeasure[] GetClassifierMeasureList() {
            return base.Channel.GetClassifierMeasureList();
        }
        
        public System.Threading.Tasks.Task<VentsCadLibrary.VentsService.ConnectionClassifierMeasure[]> GetClassifierMeasureListAsync() {
            return base.Channel.GetClassifierMeasureListAsync();
        }
        
        public VentsCadLibrary.VentsService.ConnectionNomenclature[] SearchNomenclatureByName(string name) {
            return base.Channel.SearchNomenclatureByName(name);
        }
        
        public System.Threading.Tasks.Task<VentsCadLibrary.VentsService.ConnectionNomenclature[]> SearchNomenclatureByNameAsync(string name) {
            return base.Channel.SearchNomenclatureByNameAsync(name);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="VentsService.IEpdmService")]
    public interface IEpdmService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEpdmService/SearchDoc", ReplyAction="http://tempuri.org/IEpdmService/SearchDocResponse")]
        VentsCadLibrary.VentsService.EPDMSearchColumnName[] SearchDoc(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEpdmService/SearchDoc", ReplyAction="http://tempuri.org/IEpdmService/SearchDocResponse")]
        System.Threading.Tasks.Task<VentsCadLibrary.VentsService.EPDMSearchColumnName[]> SearchDocAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEpdmService/Bom", ReplyAction="http://tempuri.org/IEpdmService/BomResponse")]
        VentsCadLibrary.VentsService.EPDMBomCells[] Bom(string filePath, string config);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEpdmService/Bom", ReplyAction="http://tempuri.org/IEpdmService/BomResponse")]
        System.Threading.Tasks.Task<VentsCadLibrary.VentsService.EPDMBomCells[]> BomAsync(string filePath, string config);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEpdmService/GetConfiguration", ReplyAction="http://tempuri.org/IEpdmService/GetConfigurationResponse")]
        string[] GetConfiguration(string filePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEpdmService/GetConfiguration", ReplyAction="http://tempuri.org/IEpdmService/GetConfigurationResponse")]
        System.Threading.Tasks.Task<string[]> GetConfigurationAsync(string filePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEpdmService/GetLink", ReplyAction="http://tempuri.org/IEpdmService/GetLinkResponse")]
        string GetLink(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEpdmService/GetLink", ReplyAction="http://tempuri.org/IEpdmService/GetLinkResponse")]
        System.Threading.Tasks.Task<string> GetLinkAsync(string fileName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEpdmServiceChannel : AirVentsCadWpf.VentsService.IEpdmService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EpdmServiceClient : System.ServiceModel.ClientBase<AirVentsCadWpf.VentsService.IEpdmService>, AirVentsCadWpf.VentsService.IEpdmService {
        
        public EpdmServiceClient() {
        }
        
        public EpdmServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EpdmServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EpdmServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EpdmServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public VentsCadLibrary.VentsService.EPDMSearchColumnName[] SearchDoc(string name) {
            return base.Channel.SearchDoc(name);
        }
        
        public System.Threading.Tasks.Task<VentsCadLibrary.VentsService.EPDMSearchColumnName[]> SearchDocAsync(string name) {
            return base.Channel.SearchDocAsync(name);
        }
        
        public VentsCadLibrary.VentsService.EPDMBomCells[] Bom(string filePath, string config) {
            return base.Channel.Bom(filePath, config);
        }
        
        public System.Threading.Tasks.Task<VentsCadLibrary.VentsService.EPDMBomCells[]> BomAsync(string filePath, string config) {
            return base.Channel.BomAsync(filePath, config);
        }
        
        public string[] GetConfiguration(string filePath) {
            return base.Channel.GetConfiguration(filePath);
        }
        
        public System.Threading.Tasks.Task<string[]> GetConfigurationAsync(string filePath) {
            return base.Channel.GetConfigurationAsync(filePath);
        }
        
        public string GetLink(string fileName) {
            return base.Channel.GetLink(fileName);
        }
        
        public System.Threading.Tasks.Task<string> GetLinkAsync(string fileName) {
            return base.Channel.GetLinkAsync(fileName);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="VentsService.ITaskService")]
    public interface ITaskService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/AddTaskList", ReplyAction="http://tempuri.org/ITaskService/AddTaskListResponse")]
        void AddTaskList(VentsCadLibrary.VentsService.SqlQueryTaskParam[] list);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/AddTaskList", ReplyAction="http://tempuri.org/ITaskService/AddTaskListResponse")]
        System.Threading.Tasks.Task AddTaskListAsync(VentsCadLibrary.VentsService.SqlQueryTaskParam[] list);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITaskServiceChannel : AirVentsCadWpf.VentsService.ITaskService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TaskServiceClient : System.ServiceModel.ClientBase<AirVentsCadWpf.VentsService.ITaskService>, AirVentsCadWpf.VentsService.ITaskService {
        
        public TaskServiceClient() {
        }
        
        public TaskServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TaskServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddTaskList(VentsCadLibrary.VentsService.SqlQueryTaskParam[] list) {
            base.Channel.AddTaskList(list);
        }
        
        public System.Threading.Tasks.Task AddTaskListAsync(VentsCadLibrary.VentsService.SqlQueryTaskParam[] list) {
            return base.Channel.AddTaskListAsync(list);
        }
    }
}
