//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using HostingWindowsForms.EPDM;

namespace AirVentsCadWpf.ServiceReference68 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Connection.ClassifierMeasure", Namespace="http://schemas.datacontract.org/2004/07/ConecctorOneC")]
    [System.SerializableAttribute()]
    public partial class ConnectionClassifierMeasure : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionFullField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DescriptionFull {
            get {
                return this.DescriptionFullField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionFullField, value) != true)) {
                    this.DescriptionFullField = value;
                    this.RaisePropertyChanged("DescriptionFull");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Connection.Nomenclature", Namespace="http://schemas.datacontract.org/2004/07/ConecctorOneC")]
    [System.SerializableAttribute()]
    public partial class ConnectionNomenclature : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference68.I1cService")]
    public interface I1cService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I1cService/AuthenticationUser", ReplyAction="http://tempuri.org/I1cService/AuthenticationUserResponse")]
        bool AuthenticationUser(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I1cService/AuthenticationUser", ReplyAction="http://tempuri.org/I1cService/AuthenticationUserResponse")]
        System.Threading.Tasks.Task<bool> AuthenticationUserAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I1cService/GetClassifierMeasureList", ReplyAction="http://tempuri.org/I1cService/GetClassifierMeasureListResponse")]
        AirVentsCadWpf.ServiceReference68.ConnectionClassifierMeasure[] GetClassifierMeasureList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I1cService/GetClassifierMeasureList", ReplyAction="http://tempuri.org/I1cService/GetClassifierMeasureListResponse")]
        System.Threading.Tasks.Task<AirVentsCadWpf.ServiceReference68.ConnectionClassifierMeasure[]> GetClassifierMeasureListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I1cService/SearchNomenclatureByName", ReplyAction="http://tempuri.org/I1cService/SearchNomenclatureByNameResponse")]
        AirVentsCadWpf.ServiceReference68.ConnectionNomenclature[] SearchNomenclatureByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I1cService/SearchNomenclatureByName", ReplyAction="http://tempuri.org/I1cService/SearchNomenclatureByNameResponse")]
        System.Threading.Tasks.Task<AirVentsCadWpf.ServiceReference68.ConnectionNomenclature[]> SearchNomenclatureByNameAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface I1cServiceChannel : AirVentsCadWpf.ServiceReference68.I1cService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class I1cServiceClient : System.ServiceModel.ClientBase<AirVentsCadWpf.ServiceReference68.I1cService>, AirVentsCadWpf.ServiceReference68.I1cService {
        
        public I1cServiceClient() {
        }
        
        public I1cServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public I1cServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public I1cServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public I1cServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AuthenticationUser(string UserName, string Password) {
            return base.Channel.AuthenticationUser(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<bool> AuthenticationUserAsync(string UserName, string Password) {
            return base.Channel.AuthenticationUserAsync(UserName, Password);
        }
        
        public AirVentsCadWpf.ServiceReference68.ConnectionClassifierMeasure[] GetClassifierMeasureList() {
            return base.Channel.GetClassifierMeasureList();
        }
        
        public System.Threading.Tasks.Task<AirVentsCadWpf.ServiceReference68.ConnectionClassifierMeasure[]> GetClassifierMeasureListAsync() {
            return base.Channel.GetClassifierMeasureListAsync();
        }
        
        public AirVentsCadWpf.ServiceReference68.ConnectionNomenclature[] SearchNomenclatureByName(string name) {
            return base.Channel.SearchNomenclatureByName(name);
        }
        
        public System.Threading.Tasks.Task<AirVentsCadWpf.ServiceReference68.ConnectionNomenclature[]> SearchNomenclatureByNameAsync(string name) {
            return base.Channel.SearchNomenclatureByNameAsync(name);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference68.IEpdmService")]
    public interface IEpdmService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEpdmService/SearchDoc", ReplyAction="http://tempuri.org/IEpdmService/SearchDocResponse")]
        Epdm.SearchColumnName[] SearchDoc(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEpdmService/SearchDoc", ReplyAction="http://tempuri.org/IEpdmService/SearchDocResponse")]
        System.Threading.Tasks.Task<Epdm.SearchColumnName[]> SearchDocAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEpdmService/Bom", ReplyAction="http://tempuri.org/IEpdmService/BomResponse")]
        Epdm.BomCells[] Bom(string filePath, string config);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEpdmService/Bom", ReplyAction="http://tempuri.org/IEpdmService/BomResponse")]
        System.Threading.Tasks.Task<Epdm.BomCells[]> BomAsync(string filePath, string config);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEpdmService/GetConfiguration", ReplyAction="http://tempuri.org/IEpdmService/GetConfigurationResponse")]
        string[] GetConfiguration(string filePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEpdmService/GetConfiguration", ReplyAction="http://tempuri.org/IEpdmService/GetConfigurationResponse")]
        System.Threading.Tasks.Task<string[]> GetConfigurationAsync(string filePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEpdmService/GetLink", ReplyAction="http://tempuri.org/IEpdmService/GetLinkResponse")]
        string GetLink(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEpdmService/GetLink", ReplyAction="http://tempuri.org/IEpdmService/GetLinkResponse")]
        System.Threading.Tasks.Task<string> GetLinkAsync(string fileName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEpdmServiceChannel : AirVentsCadWpf.ServiceReference68.IEpdmService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EpdmServiceClient : System.ServiceModel.ClientBase<AirVentsCadWpf.ServiceReference68.IEpdmService>, AirVentsCadWpf.ServiceReference68.IEpdmService {
        
        public EpdmServiceClient() {
        }
        
        public EpdmServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EpdmServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EpdmServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EpdmServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Epdm.SearchColumnName[] SearchDoc(string name) {
            return base.Channel.SearchDoc(name);
        }
        
        public System.Threading.Tasks.Task<Epdm.SearchColumnName[]> SearchDocAsync(string name) {
            return base.Channel.SearchDocAsync(name);
        }
        
        public Epdm.BomCells[] Bom(string filePath, string config) {
            return base.Channel.Bom(filePath, config);
        }
        
        public System.Threading.Tasks.Task<Epdm.BomCells[]> BomAsync(string filePath, string config) {
            return base.Channel.BomAsync(filePath, config);
        }
        
        public string[] GetConfiguration(string filePath) {
            return base.Channel.GetConfiguration(filePath);
        }
        
        public System.Threading.Tasks.Task<string[]> GetConfigurationAsync(string filePath) {
            return base.Channel.GetConfigurationAsync(filePath);
        }
        
        public string GetLink(string fileName) {
            return base.Channel.GetLink(fileName);
        }
        
        public System.Threading.Tasks.Task<string> GetLinkAsync(string fileName) {
            return base.Channel.GetLinkAsync(fileName);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference68.ITaskService")]
    public interface ITaskService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/AddTaskList", ReplyAction="http://tempuri.org/ITaskService/AddTaskListResponse")]
        void AddTaskList(HostingWindowsForms.Data.SqlQuery.TaskParam[] list);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/AddTaskList", ReplyAction="http://tempuri.org/ITaskService/AddTaskListResponse")]
        System.Threading.Tasks.Task AddTaskListAsync(HostingWindowsForms.Data.SqlQuery.TaskParam[] list);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/RunTask", ReplyAction="http://tempuri.org/ITaskService/RunTaskResponse")]
        void RunTask();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/RunTask", ReplyAction="http://tempuri.org/ITaskService/RunTaskResponse")]
        System.Threading.Tasks.Task RunTaskAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITaskServiceChannel : AirVentsCadWpf.ServiceReference68.ITaskService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TaskServiceClient : System.ServiceModel.ClientBase<AirVentsCadWpf.ServiceReference68.ITaskService>, AirVentsCadWpf.ServiceReference68.ITaskService {
        
        public TaskServiceClient() {
        }
        
        public TaskServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TaskServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddTaskList(HostingWindowsForms.Data.SqlQuery.TaskParam[] list) {
            base.Channel.AddTaskList(list);
        }
        
        public System.Threading.Tasks.Task AddTaskListAsync(HostingWindowsForms.Data.SqlQuery.TaskParam[] list) {
            return base.Channel.AddTaskListAsync(list);
        }
        
        public void RunTask() {
            base.Channel.RunTask();
        }
        
        public System.Threading.Tasks.Task RunTaskAsync() {
            return base.Channel.RunTaskAsync();
        }
    }
}
